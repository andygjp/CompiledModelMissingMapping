// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace CompiledModelMissingMapping.CompiledModels
{
    public partial class MyContextModel
    {
        partial void Initialize()
        {
            var blog = BlogEntityType.Create(this);

            BlogEntityType.CreateAnnotations(blog);

            AddAnnotation("ProductVersion", "8.0.0-rtm.23470.3");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var blog = FindEntityType("Blog")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            blog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var blogTableBase = new TableBase("Blog", null, relationalModel);
            var blogIdColumnBase = new ColumnBase<ColumnMappingBase>("BlogId", "INTEGER", blogTableBase);
            blogTableBase.Columns.Add("BlogId", blogIdColumnBase);
            var lengthColumnBase = new ColumnBase<ColumnMappingBase>("Length", "TEXT", blogTableBase);
            blogTableBase.Columns.Add("Length", lengthColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "TEXT", blogTableBase);
            blogTableBase.Columns.Add("Url", urlColumnBase);
            relationalModel.DefaultTables.Add("Blog", blogTableBase);
            var blogMappingBase = new TableMappingBase<ColumnMappingBase>(blog, blogTableBase, true);
            blogTableBase.AddTypeMapping(blogMappingBase, false);
            defaultTableMappings.Add(blogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)blogIdColumnBase, blog.FindProperty("BlogId")!, blogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lengthColumnBase, blog.FindProperty("Length")!, blogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, blog.FindProperty("Url")!, blogMappingBase);

            var tableMappings = new List<TableMapping>();
            blog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var blogsTable = new Table("Blogs", null, relationalModel);
            var blogIdColumn = new Column("BlogId", "INTEGER", blogsTable);
            blogsTable.Columns.Add("BlogId", blogIdColumn);
            var lengthColumn = new Column("Length", "TEXT", blogsTable);
            blogsTable.Columns.Add("Length", lengthColumn);
            var urlColumn = new Column("Url", "TEXT", blogsTable);
            blogsTable.Columns.Add("Url", urlColumn);
            var pK_Blogs = new UniqueConstraint("PK_Blogs", blogsTable, new[] { blogIdColumn });
            blogsTable.PrimaryKey = pK_Blogs;
            var pK_BlogsUc = RelationalModel.GetKey(this,
                "Blog",
                new[] { "BlogId" });
            pK_Blogs.MappedKeys.Add(pK_BlogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BlogsUc).Add(pK_Blogs);
            blogsTable.UniqueConstraints.Add("PK_Blogs", pK_Blogs);
            relationalModel.Tables.Add(("Blogs", null), blogsTable);
            var blogsTableMapping = new TableMapping(blog, blogsTable, true);
            blogsTable.AddTypeMapping(blogsTableMapping, false);
            tableMappings.Add(blogsTableMapping);
            RelationalModel.CreateColumnMapping(blogIdColumn, blog.FindProperty("BlogId")!, blogsTableMapping);
            RelationalModel.CreateColumnMapping(lengthColumn, blog.FindProperty("Length")!, blogsTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, blog.FindProperty("Url")!, blogsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
